package org.curious.regex;

import org.curious.regex.generator.nodes.Node;
import org.curious.regex.generator.visitors.GenerationVisitor;
import org.curious.regex.generator.visitors.UniqueGenerationVisitor;
import org.curious.regex.parsing.DefaultTreeBuilder;
import org.curious.regex.parsing.NodeTreeBuilder;

import java.util.List;
import java.util.stream.Stream;

public class RgxGen {

    private final String aPattern;
    private final Node   aNode;

    public RgxGen(String pattern) {
        aPattern = pattern;
        aNode = null;
    }

    /**
     * Returns number of unique values that can be generated with the pattern
     *
     * @return number of unique values
     */
    public long numUnique() {
        // FIXME
        return 0;
    }

    /**
     * Stream values generated with the pattern.
     * Values may repeat.
     *
     * @return stream of generated strings
     */
    public Stream<String> stream() {
        return Stream.generate(this::generate);
    }

    /**
     * Stream *UNIQUE* values generated by pattern
     *
     * @return stream of unique generated strings
     */
    public Stream<String> uStream() {
        UniqueGenerationVisitor ugv = new UniqueGenerationVisitor();
        aNode.visit(ugv);
        return ugv.getUniqueStrings();
    }

    /**
     * Generate another string from the pattern.
     *
     * @return generated string.
     */
    public String generate() {
        GenerationVisitor gv = new GenerationVisitor();
        aNode.visit(gv);
        return gv.getString();
    }
}
